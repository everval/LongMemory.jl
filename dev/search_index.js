var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LongMemory","category":"page"},{"location":"#LongMemory","page":"Home","title":"LongMemory","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LongMemory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LongMemory]","category":"page"},{"location":"#LongMemory.arfigen-Tuple{Int64, Real, Any, Real}","page":"Home","title":"LongMemory.arfigen","text":"arfigen(T::Int, μ::Real, AR::Array, d::Real; σ=1)\n\nGenerate a time series with long memory parameter d and length T using the ARFIMA(p,d,0) model.\n\nArguments\n\nT::Int: length of the time series\nμ::Float64: mean of the time series\nAR::Array: AR coefficients\nd::Float64: fractional difference parameter\n\nOptional arguments\n\nσ::Float64: standard deviation of the time series\n\nOutput\n\nx::Vector: time series\n\nNotes\n\nThe code is inspired by the function dgp_arfima.m by Carlos Vladimir Rodríguez Caballero (2023)\n\nExamples\n\njulia> arfigen(100, 0, [0.2; -0.5], 0.4])\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.arfimagen-Tuple{Int64, Real, Array, Real, Array}","page":"Home","title":"LongMemory.arfimagen","text":"arfimagen(T::Int, μ::Real, AR::Array, d::Real, MA::Array; σ=1)\n\nGenerate a time series with long memory parameter d and length T using the ARFIMA(p,d,q) model.\n\nArguments\n\nT::Int: length of the time series\nμ::Float64: mean of the time series\nAR::Array: AR coefficients\nd::Float64: fractional difference parameter\nMA::Array: MA coefficients\n\nOptional arguments\n\nσ::Float64: standard deviation of the time series\n\nOutput\n\nx::Vector: time series\n\nNotes\n\nThe code is inspired by the function dgp_arfima.m by Carlos Vladimir Rodríguez Caballero (2023)\n\nExamples\n\njulia> arfimagen(100, 0, [0.2; -0.5], 0.4, [-0.3; 0.1]])\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csa_llk-Tuple{Real, Real, Array}","page":"Home","title":"LongMemory.csa_llk","text":"csa_llk(p::Real, q::Real, x::Array)\n\nComputes the log-likelihood of the CSA process with parameters p and q given the data x.\n\nArguments\n\np::Real: The first parameter of the CSA process.\nq::Real: The second parameter of the CSA process.\nx::Array: The data.\n\nNotes\n\nThis function computes the concentrated log-likelihood function of the CSA process with parameters p and q given the data x.\n\nExamples\n\njulia> csa_llk(1.4, 1.8, randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csa_var_matrix-Tuple{Int64, Real, Real}","page":"Home","title":"LongMemory.csa_var_matrix","text":"csa_var_matrix(T::Int, d::Real)\n\nConstructs the autocovariance matrix of the CSA process with parametersp and q at lags 0, 1, ..., T-1.\n\nArguments\n\nT::Int: The number of lags to compute.\np::Real: The first parameter of the CSA process.\nq::Real: The second parameter of the CSA process.\n\nExamples\n\njulia> fi_var_matrix(10, 1.4, 1.8)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csa_var_vals-Tuple{Int64, Real, Real}","page":"Home","title":"LongMemory.csa_var_vals","text":"csa_var_vals(T::Int, p::Real, q::Real)\n\nComputes the autocovariance function of the CSA process with parameters p and q at lags 0, 1, ..., T-1.\n\nArguments\n\nT::Int: The number of lags to compute.\np::Real: The first parameter of the CSA process.\nq::Real: The second parameter of the CSA process.\n\nNotes\n\nThis function uses the recursive formula for the autocovariance function of the CSA process.\n\nExamples\n\njulia> csa_var_vals(20, 0.4, 0.6)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csadiff-Tuple{Array, Any, Any}","page":"Home","title":"LongMemory.csadiff","text":"csadiff(x,p,q)\n\nGenerate long memory by using the moving average representation of the cross-sectional aggregated process using the fast Fourier algorithm. See Vera-Valdes(2021) for details.\n\nArguments\n\nx::Vector: time series\np::Float64: first parameter of the cross-sectional aggregated process\nq::Float64: second parameter of the cross-sectional aggregated process, which is related to the fractional difference parameter d by q = 2(1-d)\n\nNotes\n\nq determines the long memory parameter of the cross-sectional aggregated process. The relation q = 2(1-d) holds, where d is the fractional difference parameter. We use autoregressive formulas to efficiently compute the coefficients of the moving average representation of the cross-sectional aggregated process. \n\nExamples\n\njulia> csadiff(randn(100,1),1.2,1.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csagen-Tuple{Int64, Any, Any}","page":"Home","title":"LongMemory.csagen","text":"csagen(T::Int,p,q;μ=0,σ=1)\n\nGenerate a time series with long memory parameter q and length T using the cross-sectional aggregated process.  FSee Vera-Valdes(2021) for details.\n\nArguments\n\nT::Int: length of the time series\np::Float64: first parameter of the cross-sectional aggregated process\nq::Float64: second parameter of the cross-sectional aggregated process, which is related to the fractional difference parameter d by q = 2(1-d)\n\nOptional arguments\n\nμ::Float64: mean of the time series\nσ::Float64: standard deviation of the time series\n\nOutput\n\nx::Vector: time series\n\nExamples\n\njulia> csagen(100,1.2,1.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csagen-Tuple{Int64, Int64, Any, Any}","page":"Home","title":"LongMemory.csagen","text":"csagen(T::Int,N::Int,p,q;t=0.01;μ=0,σ=1)\n\nGenerate a time series with long memory parameter q and length T using the cross-sectional aggregation of 'N' AR(1) processes à la Granger (1980).\n\nArguments\n\nT::Int: length of the time series\nN::Int: number of AR(1) processes\np::Float64: first parameter of the cross-sectional aggregated process\nq::Float64: second parameter of the cross-sectional aggregated process, which is related to the fractional difference parameter d by q = 2(1-d)\n\nOptional arguments\n\nt::Float64: taper length\nμ::Float64: mean of the time series\nσ::Float64: standard deviation of the time series\n\nNotes\n\nMultiple dispatch is used to generate the finite sample process if 'N' is included in the arguments.\n\nOutput\n\nx::Vector: time series\n\nExamples\n\njulia> csagen(100,100,1.2,1.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.csamle_est-Tuple{Array}","page":"Home","title":"LongMemory.csamle_est","text":"csa_mle_est(x::Array)\n\nComputes the maximum likelihood estimate of the parameters p and q of the CSA process and the variance of the CSA process given the data x.\n\nArguments\n\nx::Array: The data.\n\nNotes\n\nThis function uses the Optim package to minimize the log-likelihood function.\n\nExamples\n\njulia> csa_mle_est(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.edmgen-Tuple{Int64, Any}","page":"Home","title":"LongMemory.edmgen","text":"edmgen(T::Int,d; t=0.5, μ=0, σ=1)\n\nGenerate a time series with long memory parameter d and length T using the error duration model à la Parke (1999).\n\nArguments\n\nT::Int: length of the time series\nd::Float64: long memory parameter\n\nOptional arguments\n\nt::Float64: taper length\nμ::Float64: mean of the time series\nσ::Float64: standard deviation of the time series\n\nOutput\n\nx::Vector: time series\n\nNotes\n\nThe taper length t is the proportion of the time series that is pre-sampled to avoid the initial bias of the error duration model.\n\nExamples\n\njulia> edmgen(100,0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.exact_whittle_est-Tuple{Array}","page":"Home","title":"LongMemory.exact_whittle_est","text":"exact_whittle_est(x::Array; m=0.5, l=0)\n\nEstimate the long memory parameter of a time series x using the exact Whittle log-likelihood function. See Shimotsu and Phillips (2005) for details.\n\nArguments\n\nx::Vector: time series\nm∈(0,1)::Float64: taper final\nl∈(0,1)::Float64: taper initial\n\nOutput\n\nd::Float64: long memory parameter\n\nNotes\n\nThe function considers the periodogram of the time series x for frequencies in the interval [T^l,T^m]. The zero frequency is always excluded. The condition m < l must hold. The default values of m and l are 0.5 and 0, respectively.\n\nExamples\n\njulia> exact_whittle_est(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.exact_whittle_llk-Tuple{Any, Array}","page":"Home","title":"LongMemory.exact_whittle_llk","text":"exact_whittle_llk(d, x::Array; m=0.5, l=0)\n\nCompute the exact Whittle log-likelihood function of a time series x for a given long memory parameter d. See Shimotsu and Phillips (2005) for details.\n\nArguments\n\nd::Float64: long memory parameter\nx::Vector: time series\nm∈(0,1)::Float64: taper final\nl∈(0,1)::Float64: taper initial\n\nOutput\n\nQ::Float64: Whittle log-likelihood function\n\nNotes\n\nThe function considers the periodogram of the time series x for frequencies in the interval [T^l,T^m]. The zero frequency is always excluded. The condition m < l must hold. The default values of m and l are 0.5 and 0, respectively.\n\nExamples\n\njulia> exact_whittle_llk(0.4,randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fi-Tuple{Int64, Any}","page":"Home","title":"LongMemory.fi","text":"fi(T,d;μ=0,σ=1)\n\nGenerate a time series with long memory parameter d and length T using the fractional difference filter.\n\nArguments\n\nT::Int: length of the time series\nd::Float64: fractional difference parameter\n\nOptional arguments\n\nμ::Float64: mean of the time series\nσ::Float64: standard deviation of the time series\n\nOutput\n\nx::Vector: time series\n\nNotes\n\nMultiple dispatch is used for generation: If d is an integer, the function returns a time series with first or null difference. See fracdiff for details.\n\nExamples\n\njulia> fi(100,0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fi_llk-Tuple{Real, Array}","page":"Home","title":"LongMemory.fi_llk","text":"fi_llk(x::Array,d::Real)\n\nComputes the log-likelihood of the fractional differenced process with parameter d given the data x.\n\nArguments\n\nx::Array: The data.\nd::Real: The fractional differencing parameter.\n\nNotes\n\nThis function computes the concentrated log-likelihood function of the fractional differenced process with parameter d given the data x. The function is inspired by the arfima.Estimate() function in Ox; see Doornik (1999).\t\n\nExamples\n\njulia> fi_llk(randn(100,1), 0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fi_survival_probs-Tuple{Int64, Any}","page":"Home","title":"LongMemory.fi_survival_probs","text":"\"     fisurvivalprobs(N::Int,d)\n\nGenerate the survival probabilities of the error duration model à la Parke (1999).\n\nArguments\n\nN::Int: length of the time series\nd::Float64: fractional difference parameter\n\nOutput\n\np::Vector: survival probabilities\n\nNotes\n\nThe survival probabilities are computed using the recursive formula p_{t+1} = p_t * (t + d - 1) / (t + 1 - d) to avoid numerical overflow.\n\nExamples\n\njulia> fi_survival_probs(100,0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fi_var_matrix-Tuple{Int64, Real}","page":"Home","title":"LongMemory.fi_var_matrix","text":"fi_var_matrix(T::Int, d::Real)\n\nConstructs the autocovariance matrix of the fractional differenced process with parameter d at lags 0, 1, ..., T-1.\n\nArguments\n\nT::Int: The number of lags to compute.\nd::Real: The fractional differencing parameter.\n\nExamples\n\njulia> fi_var_matrix(10, 0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fi_var_vals-Tuple{Int64, Real}","page":"Home","title":"LongMemory.fi_var_vals","text":"fi_var_vals(T::Int,d::Real)\n\nComputes the autocovariance function of the fractional differenced process with parameter d at lags 0, 1, ..., T-1.\n\nArguments\n\nT::Int: The number of lags to compute.\nd::Real: The fractional differencing parameter.\n\nNotes\n\nThis function uses the recursive formula for the autocovariance function of the fractional differenced process. \n\nExamples\n\njulia> fi_var_vals(10, 0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fimle_est-Tuple{Array}","page":"Home","title":"LongMemory.fimle_est","text":"fimle_est(x::Array)\n\nComputes the maximum likelihood estimate of the fractional differencing parameter and the variance of the fractional differenced process given the data x.\n\nArguments\n\nx::Array: The data.\n\nNotes\n\nThis function uses the Optim package to minimize the log-likelihood function. The function is inspired by the arfima.Estimate() function in Ox; see Doornik (1999).\t\n\nExamples\n\njulia> fimle_est(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fracdiff-Tuple{Array, Float64}","page":"Home","title":"LongMemory.fracdiff","text":"fracdiff(x,d)\n\nCompute the fractional difference of a time series x with fractional order d∈(-1/2,1/2).\n\nArguments\n\nx::Vector: time series\nd::Float64: fractional difference parameter\n\nNotes\n\nThe function uses the fast Fourier transform to compute the convolution of the time series with the fractional difference filter.  See Jensen and Nielsen (2014) for details. We use autoregressive formulas to efficiently compute the coefficients of the fractional difference filter.\n\nExamples\n\njulia> fracdiff(randn(100,1),0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.fracdiff-Tuple{Array, Int64}","page":"Home","title":"LongMemory.fracdiff","text":"fracdiff(x,d::Int)\n\nCompute the first or null difference of a time series x. Multiple dispatch is used to return the same input or call the function diff from the Julia standard library if d=1 or d=0, respectively.\n\nArguments\n\nx::Vector: time series\nd::Int64: difference parameter\n\nExamples\n\njulia> fracdiff(randn(100,1),1)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.gph_est-Tuple{Array}","page":"Home","title":"LongMemory.gph_est","text":"gph_est(x::Array; m=0.5, l=0, br=0::Int)\n\nEstimate the long memory parameter of a time series x using the log-periodogram estimator. See Geweke and Porter-Hudak (1983) and Andrews and Guggenberger (2003) for details.\n\nArguments\n\nx::Vector: time series\nm∈(0,1)::Float64: taper final\nl∈(0,1)::Float64: taper initial\nbr::Int64: number of bias reduction terms\n\nNotes\n\nThe function considers the periodogram of the time series x for frequencies in the interval [T^l,T^m]. The zero frequency is always excluded. The default values of m and l are 0.5 and 0, respectively. The condition m < l must hold.\n\nThe default value of br is 0 which returns the original GPH log-periodogram estimator.\n\nExamples\n\njulia> gph_est(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.gph_est_variance-Tuple{Array}","page":"Home","title":"LongMemory.gph_est_variance","text":"gph_est_variance(x::Array; m=0.5, l=0, br=0::Int)\n\nEstimate the variance of the long memory parameter of a time series x using the log-periodogram estimator. See Geweke and Porter-Hudak (1983) and Andrews and Guggenberger (2003) for details.\n\nArguments\n\nx::Vector: time series\n\nOptional arguments\n\nm∈(0,1)::Float64: taper final\nbr::Int64: number of bias reduction terms\n\nNotes\n\nMultiple dispatch is used for computation. If the first input is an integer, the function interprets it as the sample size; otherwise, it computes the sample size from the length of the time series.\n\nExamples\n\njulia> gph_est_variance(fi(100,0.4))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.gph_est_variance-Tuple{Int64}","page":"Home","title":"LongMemory.gph_est_variance","text":"gph_est_variance(T::Int; m=0.5, l=0, br=0::Int)\n\nEstimate the variance of the long memory parameter of a time series of length T using the log-periodogram estimator. See Geweke and Porter-Hudak (1983) and Andrews and Guggenberger (2003) for details.\n\nArguments\n\nT::Int: length of the time series\n\nOptional arguments\n\nm∈(0,1)::Float64: taper final\nbr::Int64: number of bias reduction terms\n\nNotes\n\nMultiple dispatch is used for computation. If the first input is an integer, the function interprets it as the sample size; otherwise, it computes the sample size from the length of the time series.\n\nExamples\n\njulia> gph_est_variance(100,0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.my_toeplitz-Tuple{Array}","page":"Home","title":"LongMemory.my_toeplitz","text":"my_toeplitz(coefs::Array)\n\nConstructs a Toeplitz matrix from the given coefficients.\n\nArguments\n\ncoefs::Array: An array of coefficients.\n\nExamples\n\njulia> my_toeplitz([1, 2, 3])\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.periodogram-Tuple{Array}","page":"Home","title":"LongMemory.periodogram","text":"periodogram(x::Array)\n\nCompute the periodogram of a time series x using the fast Fourier transform.\n\nArguments\n\nx::Vector: time series\n\nOutput\n\nI_w::Vector: periodogram\nw::Vector: Fourier frequencies\n\nExamples\n\njulia> periodogram(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.whittle_est-Tuple{Array}","page":"Home","title":"LongMemory.whittle_est","text":"whittle_est(x::Array; m=0.5, l=0)\n\nEstimate the long memory parameter of a time series x using the Whittle log-likelihood function. See Künsch (1987) for details.\n\nArguments\n\nx::Vector: time series\nm∈(0,1)::Float64: taper final\nl∈(0,1)::Float64: taper initial\n\nOutput\n\nd::Float64: long memory parameter\n\nNotes\n\nThe function considers the periodogram of the time series x for frequencies in the interval [T^l,T^m]. The zero frequency is always excluded. The condition m < l must hold. The default values of m and l are 0.5 and 0, respectively.\n\nExamples\n\njulia> whittle_est(randn(100,1))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.whittle_est_variance-Tuple{Array}","page":"Home","title":"LongMemory.whittle_est_variance","text":"whittle_est_variance(x::Array; m=0.5)\n\nEstimate the variance of the estimator for the long memory parameter of a time series x using the Whittle log-likelihood function. See Künsch (1987) for details.\n\nArguments\n\nx::Vector: time series\n\nOptional arguments\n\nm∈(0,1)::Float64: taper final\n\nNotes\n\nMultiple dispatch is used for computation. If the first input is an integer, the function interprets it as the sample size; otherwise, it computes the sample size from the length of the time series.     The variance is the same as the one from using the exact Whittle log-likelihood function.\n\nExamples\n\njulia> whittle_est_variance(fi(100,0.4))\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.whittle_est_variance-Tuple{Int64}","page":"Home","title":"LongMemory.whittle_est_variance","text":"whittle_est_variance(T::Int;m=0.5\n\nEstimate the variance of the estimator for the long memory parameter of a time series of length T using the Whittle log-likelihood function. See Künsch (1987) for details.\n\nArguments\n\nT::Int: length of the time series\n\nOptional arguments\n\nm∈(0,1)::Float64: taper final\n\nNotes\n\nMultiple dispatch is used for computation. If the first input is an integer, the function interprets it as the sample size; otherwise, it computes the sample size from the length of the time series. The variance is the same as the one from using the exact Whittle log-likelihood function.\n\nExamples\n\njulia> whittle_est_variance(100,0.4)\n\n\n\n\n\n","category":"method"},{"location":"#LongMemory.whittle_llk-Tuple{Any, Array}","page":"Home","title":"LongMemory.whittle_llk","text":"whittle_llk(d, x::Array; m=0.5, l=0)\n\nCompute the Whittle log-likelihood function of a time series x for a given long memory parameter d. See Künsch (1987) for details.\n\nArguments\n\nd::Float64: long memory parameter\nx::Vector: time series\nm∈(0,1)::Float64: taper final\nl∈(0,1)::Float64: taper initial\n\nOutput\n\nQ::Float64: Whittle log-likelihood function\n\nNotes\n\nThe function considers the periodogram of the time series x for frequencies in the interval [T^l,T^m]. The zero frequency is always excluded. The condition m < l must hold.  The default values of m and l are 0.5 and 0, respectively.\n\nExamples\n\njulia> whittle_llk(0.4,randn(100,1))\n\n\n\n\n\n","category":"method"}]
}
